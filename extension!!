(function (Scratch) {
  "use strict";

  let lastKey = '';
  const timestamps = Object.create(null);
  const hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

  // Store last key pressed (lowercase for single characters)
  document.addEventListener('keydown', e => {
    lastKey = e.key.length === 1 ? e.key.toLowerCase() : e.key;
  });

  class SummerznsUtil {
    constructor() {}

    getInfo() {
      return {
        id: 'summerznsUtil',
        name: "Summerzn's Utilities",
        color1: '#b57edc', // Lavender
        color2: '#a96bcf',
        color3: '#9c5fbe',

        blocks: [
          // --- KEYBOARD CATEGORY ---
          { blockType: Scratch.BlockType.LABEL, text: 'Keyboard' },

          {
            opcode: 'getLastKeyPressed',
            blockType: Scratch.BlockType.REPORTER,
            text: 'last key pressed'
          },

          // --- TIMESTAMPS CATEGORY ---
          { blockType: Scratch.BlockType.LABEL, text: '⏱Timestamps' },

          {
            opcode: 'getSecondsSinceTimestamp',
            blockType: Scratch.BlockType.REPORTER,
            text: 'seconds since timestamp ID [ID]',
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: '1' }
            }
          },
          {
            opcode: 'doesTimestampExist',
            blockType: Scratch.BlockType.BOOLEAN,
            text: 'does timestamp ID [ID] exist?',
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: '1' }
            }
          },
          {
            opcode: 'isElapsedGreaterThan',
            blockType: Scratch.BlockType.BOOLEAN,
            text: 'has time since ID [ID] exceeded [SECONDS] seconds?',
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: '1' },
              SECONDS: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            }
          },
          {
            opcode: 'recordTimestamp',
            blockType: Scratch.BlockType.COMMAND,
            text: 'record timestamp with ID [ID]',
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: '1' }
            }
          },
          {
            opcode: 'removeTimestamp',
            blockType: Scratch.BlockType.COMMAND,
            text: 'remove timestamp with ID [ID]',
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: '1' }
            }
          },
          {
            opcode: 'getAllTimestampIDs',
            blockType: Scratch.BlockType.REPORTER,
            text: 'list of all timestamp IDs'
          },
          {
            opcode: 'clearAllTimestamps',
            blockType: Scratch.BlockType.COMMAND,
            text: 'clear all timestamps'
          },

          // --- VECTOR UTILITIES CATEGORY ---
          { blockType: Scratch.BlockType.LABEL, text: '📐 Vector Utilities' },

          {
            opcode: 'getNormalizeMultiplier',
            blockType: Scratch.BlockType.REPORTER,
            text: 'normalization multiplier for [X] [Y]',
            arguments: {
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 }
            }
          }
        ]
      };
    }

    // --- KEYBOARD ---
    getLastKeyPressed() {
      return lastKey;
    }

    // --- TIMESTAMPS ---
    recordTimestamp({ ID }) {
      timestamps[ID] = Date.now();
    }

    getSecondsSinceTimestamp({ ID }) {
      if (timestamps[ID]) {
        return +(((Date.now() - timestamps[ID]) / 1000).toFixed(5));
      }
      return 0;
    }

    isElapsedGreaterThan({ ID, SECONDS }) {
      if (timestamps[ID]) {
        return ((Date.now() - timestamps[ID]) / 1000) > SECONDS;
      }
      return false;
    }

    doesTimestampExist({ ID }) {
      return hasOwn(timestamps, ID);
    }

    removeTimestamp({ ID }) {
      delete timestamps[ID];
    }

    getAllTimestampIDs() {
      return JSON.stringify(Object.keys(timestamps));
    }

    clearAllTimestamps() {
      for (const key in timestamps) {
        delete timestamps[key];
      }
    }

    // --- VECTOR UTILS ---
    getNormalizeMultiplier({ X, Y }) {
      const x = parseFloat(X);
      const y = parseFloat(Y);
      const length = Math.sqrt(x * x + y * y);
      if (length === 0) return 0;
      return +((1 / length).toFixed(5));
    }
  }

  Scratch.extensions.register(new SummerznsUtil());
})(Scratch);
